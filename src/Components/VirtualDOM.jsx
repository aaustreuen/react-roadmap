import React from "react";

const VirtualDOM = () => {
    return (
        <div className="content-block">
            <h1 className="content-title">Virtual Dom</h1>
            <div className="content-text">
                <p>Виртуальный DOM (VDOM) — это концепция программирования, в которой «виртуальное» представление пользовательского интерфейса хранится в памяти и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM. Этот процесс называется согласованием.</p>
                <p>DOM расшифровывается как Document Object Model (объектная модель документа). При каждом изменении UI (user interface), DOM также обновляется для отображения этих изменений. Частые манипуляции с DOM негативно влияют на производительность.</p>
                <p>DOM представляет собой древовидную структуру данных. Поэтому изменения и обновления самого DOM являются достаточно быстрыми. Но после изменения обновленный элемент и все его потомки (дочерние элементы) должны быть повторно отрисованы (отрендерены) для обновления UI приложения. Повторный рендеринг — очень медленный процесс. Таким образом, чем больше у нас компонентов UI, тем более дорогими с точки зрения производительности являются обновления DOM.</p>
                <p>Манипуляции с RDOM являются медленными. Манипуляции с VDOM намного быстрее, поскольку они не отображаются (отрисовываются) на экране.</p>
                <p>Когда в UI добавляются новые элементы, создается VDOM в виде дерева. Каждый элемент является узлом этого дерева. При изменении состояния любого элемента, создается новое дерево. Затем это новое дерево сравнивается (diffed) со старым.</p>
                <p>После этого вычисляется наиболее эффективный метод внесения изменений в RDOM. Цель данных вычислений состоит в минимизации количества операций, совершаемых с RDOM. Тем самым, уменьшаются накладные расходы, связанные с обновлением RDOM.</p>
                <p>После этого вычисляется разница между предыдущей и текущей версиями виртуального DOM-дерева. Затем все родительское поддерево подвергается повторному рендерингу для представления обновленного UI. Наконец, это обновленное дерево используется для обновления RDOM.</p>
                <p>В React каждая часть UI является компонентом и почти каждый компонент имеет состояние (state). При изменении состояния компонента, React обновляет VDOM. После обновления VDOM, React сравнивает его текущую версию с предыдущей. Этот процесс называется «поиском различий» (diffing).</p>
                <p>После обнаружения объектов, изменившихся в VDOM, React обновляет соответствующие объекты в RDOM. Это существенно повышает производительность по сравнению с прямыми манипуляциями DOM. Именно это делает React высокопроизводительной библиотекой JavaScript.</p>
                <p>React использует эвристический O(n) (линейный) алгоритм, основываясь на двух предположениях:</p>
                <ul>
                    <li>Два элемента разных типов приводят к построению разных деревьев</li>
                    <li>Разработчик может обеспечить стабильность элементов между рендерингами посредством пропа key (ключ)</li>
                </ul>
            </div>
        </div>
    )
}

export default VirtualDOM